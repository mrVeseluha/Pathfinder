# -*- coding: utf-8 -*-
#
#  PathFinder.py
#
#  Copyright 2016 –ú–∞–∫—Å–∏–º <maxim@mrveseluh.pub>
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#
#  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–∏—Å–∫–∞ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏.

import time, random


class StopWatch():
    def __init__(self):
        self.start = time.time()

    def check(self):
        return time.time() - self.start

    def reset(self):
        self.start = time.time()


# –õ–∞–±–∏—Ä–∏–Ω—Ç –∑–∞–¥–∞–Ω –º–∞—Ç—Ä–∏—Ü–µ–π. 0 - —è—á–µ–π–∫–∞ –∑–∞–Ω—è—Ç–∞; 1 - —Å–≤–æ–±–æ–¥–Ω–∞.
MAZE = [[1, 1, 1, 1, 1, 0, 1, 1, 1, 1],  # 0
        [1, 1, 1, 1, 1, 0, 1, 0, 0, 1],  # 1
        [1, 1, 0, 0, 1, 0, 1, 1, 0, 1],  # 2
        [1, 1, 1, 0, 1, 0, 1, 1, 1, 1],  # 3
        [1, 1, 1, 0, 1, 0, 1, 0, 0, 0],  # 4
        [1, 1, 1, 0, 1, 0, 1, 1, 1, 1],  # 5
        [1, 1, 1, 0, 1, 1, 1, 0, 1, 1],  # 6
        [1, 1, 1, 0, 0, 0, 0, 0, 0, 1],  # 7
        [1, 1, 1, 0, 1, 1, 1, 0, 1, 1],  # 8
        [1, 0, 1, 1, 1, 0, 1, 1, 1, 1]]  # 9
# 0  1  2  3  4  5  6  7  8  9

MAZE1 = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 0
         [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],  # 1
         [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],  # 2
         [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],  # 3
         [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],  # 4
         [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],  # 5
         [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],  # 6
         [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],  # 7
         [1, 1, 1, 1, 1, 0, 1, 1, 1, 1],  # 8
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]  # 9
# columns 0  1  2  3  4  5  6  7  8  9

MAZE2 = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 0
         [1, 0, 0, 1, 1, 1, 1, 0, 0, 1],  # 1
         [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],  # 2
         [1, 1, 1, 0, 0, 0, 0, 1, 1, 1],  # 3
         [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],  # 4
         [1, 1, 1, 1, 0, 0, 1, 1, 1, 1],  # 5
         [1, 1, 1, 0, 0, 0, 0, 1, 1, 1],  # 6
         [1, 1, 0, 0, 1, 1, 0, 0, 1, 1],  # 7
         [1, 0, 0, 1, 1, 1, 1, 0, 0, 1],  # 8
         [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]  # 9
# 0  1  2  3  4  5  6  7  8  9

CLEAN_MAZE = [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 0 rows
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 1
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 2
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 3
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 4
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 5
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 6
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 7
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],  # 8
              [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]  # 9
# columns      0  1  2  3  4  5  6  7  8  9

COUNTS = 0


def ShowMaze(route=[], a=None, b=None, digit=False, maze=MAZE):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ª–∞–±–∏—Ä–∏–Ω—Ç –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∏ –º–æ–∂–µ—Ç –≤—ã–≤–µ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É –¥–≤—É—Ö —Ç–æ—á–µ–∫
    :type route: list
    :param route: –ú–∞—Ä—à—Ä—É—Ç –≤ –ª–∞–±–∏—Ä–∏–Ω—Ç–µ. –°–ø–∏—Å–æ–∫ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (–∫–æ—Ä—Ç–µ–∂–µ–π) –≤–∏–¥–∞ (—Ä—è–¥, –∫–æ–ª–æ–Ω–∫–∞)
    :type a: tuple
    :param a: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞
    :type b: tuple
    :param b: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
    :type digit: bool
    :param digit: –ï—Å–ª–∏ True, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç –≤–º–µ—Å—Ç–æ —Ç–æ—á–µ–∫ –Ω–æ–º–µ—Ä —à–∞–≥–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ
    """
    # –õ–µ–≥–µ–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –Ω–∞ —ç–∫—Ä–∞–Ω. 0 - –¥–ª—è –∑–∞–Ω—è—Ç–æ–π —è—á–µ–π–∫–∏; 1 - –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–π —è—á–µ–π–∫–∏
    legend = {0: 'üå≤', 1: '‚¨õ'}
    # text = ' ' + '_' * len(MAZE[0]) * 3 + '_\n'  # –°–æ–∑–¥–∞–¥–∏–º –≤–µ—Ä—Ö–Ω—é—é –ª–∏–Ω–∏—é
    text = ''
    for row in range(0, len(maze)):  # –¶–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ —Ä—è–¥–æ–≤
        text += str(row)  # –£–∫–∞–∂–µ–º –Ω–æ–º–µ—Ä —Ä—è–¥–∞
        for col in range(0, len(maze[row])):  # –¶–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ –∫–æ–ª–æ–Ω–æ–∫
            if (row, col) == a:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –ø–µ—Ä–≤–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –Ω–µ—ë
                text += '|' + 'üèÉ'  # –µ—Å–ª–∏ –î–∞, —Ç–æ –≤—ã–≤–µ–¥–µ–º "a"
            elif (row, col) == b:  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–∞ –∫–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –Ω–µ—ë
                text += '|' + '‚õ©'  # –µ—Å–ª–∏ –î–∞, —Ç–æ –≤—ã–≤–µ–¥–µ–º "b"
            elif (row, col) in route and digit:  # –ï—Å–ª–∏ —ç—Ç–æ —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –æ–Ω –∑–∞–¥–∞–Ω
                text += '|' + '{:02d}'.format(route.index((row, col)))  # '.'   # –≤—ã–≤–µ–¥–µ–º –Ω–æ–º–µ—Ä —à–∞–≥–∞ –µ—Å–ª–∏ digit==True
            elif (row, col) in route:  # –∏–ª–∏ –µ—Å–ª–∏ digit –Ω–µ –∑–∞–¥–∞–Ω
                text += '|' + 'üë£'  # –≤—ã–≤–µ–¥–µ–º ".."
            else:  # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
                text += '|' + legend[maze[row][col]]  # –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ª–µ–≥–µ–Ω–¥–æ–π
        text += '\n'  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á—ë—Ä—Ç–æ—á–∫—É –≤ —Ä—è–¥—É :-)
    # text += ' ' + '-' * len(MAZE[0]) * 3 + '-\n'  # –∏ –Ω–∏–∂–Ω—é—é –ª–∏–Ω–∏—é
    text += ' |0Ô∏è|1Ô∏è|2Ô∏è|3Ô∏è|4Ô∏è|5Ô∏è|6Ô∏è|7Ô∏è|8Ô∏è|9Ô∏è\n'
    print(text)  # –í—ã–≤–æ–¥–∏–º –≤—Å—ë —ç—Ç–æ –Ω–∞ —ç–∫—Ä–∞–Ω


def distance(a: tuple, b: tuple, cross: bool = False) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏(—è—á–µ–π–∫–∞–º–∏) –≤ —à–∞–≥–∞—Ö —Å —É—á—ë—Ç–æ–º —Å–ø–æ—Å–æ–±–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏.
    :type b: tuple
    :type a: tuple
    :type cross: bool
    :param a: –¢–æ—á–∫–∞ –ê, –∫–æ—Ä—Ç–µ–∂ –≤–∏–¥–∞ (—Ä—è–¥, –∫–æ–ª–æ–Ω–∫–∞)
    :param b: –¢–æ—á–∫–∞ –í, –∫–æ—Ä—Ç–µ–∂ –≤–∏–¥–∞ (—Ä—è–¥, –∫–æ–ª–æ–Ω–∫–∞)
    :param cross: –°–ø–æ—Å–æ–± –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏ ("–∫—Ä–µ—Å—Ç" - –Ω–∞ 4-–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏–ª–∏ –≤–æ –≤—Å–µ —Å–æ—Å–µ–¥–Ω–∏–µ, –Ω–∞ 8 —Å—Ç–æ—Ä–æ–Ω
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤
    """
    if cross:
        return max(abs(a[0] - b[0]), abs(a[1] - b[1]))
    else:
        return abs(a[0] - b[0]) + abs(a[1] - b[1])


def sort_point_list(points: list, dest: tuple, cross=False) -> list:
    """
    –°–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞ –ø–æ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç —Ç–æ—á–∫–∏ dest
    :type points: list
    :param points: –°–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Ç–æ—á–µ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    :type dest: tuple
    :param dest: –¢–æ—á–∫–∞ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    :rtype: list
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
    """
    points_dict = {}  # –°–æ–∑–¥–∞–¥–∏–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ {–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ (—Ä—è–¥, –∫–æ–ª–æ–Ω–∫–∞): —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ç–æ—á–∫–∏ dest}
    for point in points:  # –¶–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ –≤—Å–µ—Ö —Ç–æ—á–µ–∫
        dist = distance(point, dest, cross)  # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ (–≤ —à–∞–≥–∞—Ö) –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏,
        points_dict.setdefault(dist, [])  # –≤ —Å–ª–æ–≤–∞—Ä–µ —Å–æ–∑–ª–∞—ë–º/–ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å —Å –∏–Ω–¥–µ–∫—Å–æ–º –≤ –≤–∏–¥–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        points_dict[dist] += [point]  # –∏ –∑–∞–ø–∏—à–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ª–æ–≤–∞—Ä—å points_dict
    # –î–æ—Å—Ç–∞–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Ç–æ—á–∫–∏ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–≤ –ø–æ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏
    return (lambda ll: [el for lst in ll for el in lst])([points_dict[i] for i in sorted(points_dict.keys())])


def get_possible_moves(a: tuple, cross=False, b=None, maze=MAZE):
    """
    –§—É–Ω—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ –∏–∑ –∑–∞–¥–∞–Ω–æ–π —Ç–æ—á–∫–∏ "–∞" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.
    :type a: tuple
    :param a: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ —Ç–æ—á–∫–∏ –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏. (—Ä—è–¥,–∫–æ–ª–æ–Ω–∫–∞)
    :type b: tuple
    :param b: –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ —ç—Ç–∞ —Ç–æ—á–∫–∞, —Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –Ω–µ—ë.
    :type cross: bool
    :param cross: –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä True, —Ç–æ —Å–ø–∏—Å–æ–∫ —Ö–æ–¥–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è "–∫—Ä–µ—Å—Ç–æ–º", —Ç.–µ. –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ, –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑.
    :rtype: list
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —à–∞–≥–æ–≤ –∏–∑ —Ç–æ—á–∫–∏ "–∞".
    """
    moves = []  # –°–æ–∑–¥–∞–¥–∏–º –±—É–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
    if cross:  # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–æ—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥ "–∫—Ä–µ—Å—Ç–∞"
        for shift in [-1, 1]:  # —Ç–æ –ø–µ—Ä–µ–±–∏—Ä—ë–º —Å–¥–≤–∏–≥ –æ—Ç —à–∞–≥–∞ –Ω–∞–∑–∞–¥, –¥–æ —à–∞–≥–∞ –≤–ø–µ—Ä—ë–¥
            moves.append((a[0] + shift, a[1]))  # –í—ã—á–∏—Å–ª–∏–º —à–∞–≥–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤ —Ä—è–¥–∞—Ö)
            moves.append((a[0], a[1] + shift))  # –í—ã—á–∏—Å–ª–∏–º —à–∞–≥–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (–≤ –∫–æ–ª–æ–Ω–∫–∞—Ö)
        # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ –±—ã –æ–Ω–∏ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
        moves = list(filter(lambda point: 0 <= point[0] < len(maze) and 0 <= point[1] < len(maze[point[0]]), moves))
        moves = list(filter(lambda point: maze[point[0]][point[1]], moves))  # –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
    else:  # –ê –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ "–∫—Ä–µ—Å—Ç" (–∞ –∫–∞–∫ —Ö–æ–¥–∏—Ç —Ñ–µ—Ä–∑—å –ø–æ –¥–æ—Å–∫–µ), —Ç–æ
        for vshift in [-1, 0, 1]:  # —Ç–æ –ø–µ—Ä–µ–±–∏—Ä—ë–º —Å–¥–≤–∏–≥ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
            for hshift in [-1, 0, 1]:  # –ø–µ—Ä–µ–±–∏—Ä—ë–º —Å–¥–≤–∏–≥ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—É—á–∏–≤—à–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–æ –ª–∏—à—å –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω,
                # —Ç–∞–∫ –∫–∞–∫ Python –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
                if a[0] + vshift > -1 and a[1] + hshift > -1:  # –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ –¥—Ä—É–≥–æ–º—É
                    try:  # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–º
                        if maze[a[0] + vshift][a[1] + hshift]:  # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ (1),
                            moves.append((a[0] + vshift, a[1] + hshift))  # —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
                    except:  # –ï—Å–ª–∏ –∂–µ –º—ã –≤—Å—ë —Ç–∞–∫–∏ –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞,
                        continue  # —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ —Ç–æ—á–µ–∫ (–∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –µ–≥–æ :-) )
        moves.remove(a)  # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è —Å–ø–∏—Å–∫–∞ —Ç–æ—á–∫—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –¥–≤–∏–≥–∞—Ç—å—Å—è
    if b is not None:  # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ —Ç–æ—á–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (b),
        moves = sort_point_list(moves, b, cross)  # —Ç–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–π —Ç–æ—á–∫–∏.
    return moves  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫!


def IsNext(a: tuple, b: tuple) -> bool:
    # –ï—Å–ª–∏ –º–æ–¥—É–ª—å —Ä–∞–∑–Ω–∏—Ü—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ –∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–±–æ —Ä–∞–≤–Ω—ã 1,
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–≤–ª—è—é—Ç—Å—è –ª–∏ –¥–≤–µ —Ç–æ—á–∫–∏ —Å–æ—Å–µ–¥—è–º–∏ (—Å–º–µ–∂–Ω—ã–º–∏)
    :type a: tuple
    :param a: –¢–æ—á–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    :type b: tuple
    :param b: –¢–æ—á–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True/False –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    if abs(a[0] - b[0]) <= 1 and abs(a[1] - b[1]) <= 1:
        return True  # —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ò—Å—Ç–∏–Ω—É (True)
    else:
        return False  # –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –õ–æ–∂—å (False)


def FindRoute(a: tuple, b: tuple, route: list = [], n: int = 1, cross: bool = False, minimum_steps: int = None,
              maze=MAZE) -> list:
    """
    –°–∞–º–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è! –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (a –∏ b). –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö
    —Å–∞–º—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
    :param a: –¢–æ—á–∫–∞ –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    :type a: tuple
    :param b: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
    :type b: tuple
    :param route: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–∏. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º.
    :type route: list
    :param n: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–∏. –°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤.
    :type n: int
    :param cross: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ª–∏—à—å –Ω–∞ 4-–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ 8.
    :type cross: bool
    :param minimum_steps: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
    :type minimum_steps: int
    :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–ª–∏ None –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
    """
    global COUNTS
    COUNTS += 1
    # –°—Ä–∞–∑—É –∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–ª–µ–¥—É—é—â–µ–µ —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –º–∞—Ä—à—Ä—É—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω –≤
    # –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π minimum_steps –∏ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (n) + –∫—Ä–∞—Ç—á–∞–π—à–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ —Ñ–∏–Ω–∏—à–∞ –±–æ–ª—å—à–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ
    # –º–∏–Ω–∏–º—É–º–∞ —à–∞–≥–æ–≤,
    if minimum_steps and n - 0 + distance(a, b, cross) > minimum_steps:
        return None  # —Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None. –î–∞–ª—å—à–µ –ø—É—Ç—å –∏—Å–∫–∞—Ç—å –±–µ–∑—Å–º—ã—Å–ª–µ–Ω–Ω–æ.
    full_path = route + [a]  # –î–æ–±–∞–≤–∏–º –∫ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ–º—É –ø—É—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º—ã –∏—â–µ–º –º–∞—Ä—à—Ä—É—Ç.
    next_steps = get_possible_moves(a, cross, b, maze=maze)  # –ü–æ–ª—É—á–∏–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤.
    if next_steps == []:  # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç —Ö–æ–¥–æ–≤ –Ω–µ—Ç. –ü—Ä–æ–≤–∞–ª!
        return None  # –¢–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–æ–∏—Å–∫.
    try:  # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ —Ç–æ—á–∫—É –æ—Ç–∫—É–¥–∞ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—à–ª–∏
        next_steps.remove(route[-1])
    except:  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç –º—ã —Å—Ç–æ–∏–º –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ,
        pass  # —Ç–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –¥–µ–ª–∞–µ–º.
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ –µ—Å—Ç—å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —à–∞–≥–∏,
    if not set(route).isdisjoint(set(next_steps)):  # –∑–Ω–∞—á–∏—Ç –º—ã —Ö–æ–¥–∏–º –∫—Ä—É–≥–∞–º–∏ –∏ –º–∞—Ä—à—Ä—É—Ç —Ç–æ—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–º,
        return None  # –±—Ä–æ—Å–∞–µ–º –µ–≥–æ.
    # –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!
    if b in next_steps:  # and n <= minimum_steps:  # –ï—Å–ª–∏ –∏—Å–∫–æ–º–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Å–µ–¥–Ω–∏—Ö
        return [full_path + [b]]  # —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏. –£–†–ê!!!
    pathes = []  # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–æ–Ω–Ω—É—é —á–∞—Å—Ç—å —Å —Å–æ–∑–¥–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
    for step in next_steps:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏.
        # –†–µ–∫—É—Ä—Å–∏—è! –í—ã–∑—ã–≤–∞–µ–º —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ —Å —É—á—ë—Ç–æ–º —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
        path = FindRoute(step, b, full_path, n + 1, cross, minimum_steps,
                         maze=maze)  # –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–Ω—ã —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π.
        if path is not None:  # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω,
            pathes.extend(path)  # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
            if minimum_steps is not None:  # –ï—Å–ª–∏ –º–∏–Ω–∏–º—É–º —É–∂–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω,
                minimum_steps = min(minimum_steps, len(path[0]))  # —Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏.
            else:  # –ê –µ—Å–ª–∏ –º–∏–Ω–∏–º—É–º –µ—â—ë –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω,
                minimum_steps = len(path[0])  # —Ç–æ –ø—Ä–∏—Å–≤–æ–∏–º –µ–≥–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
    if pathes != []:  # –ï—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –Ω–∞–º —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
        min_length = min([len(path) for path in pathes])  # –æ–ø—Ä–µ–¥–µ–ª–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ä—Ä—É—Ç–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
        pathes = [path for path in pathes if len(path) == min_length]  # –ß–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö
        return pathes  # –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫!!! –£—Ä–∞ —Ä–∞–±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!!!
    else:  # –ê –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—É—Å—Ç,
        return None  # —Ç–æ –±—Ä–æ—Å–∞–µ–º –≤—Å—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–ï–õ–ò–ö–û–ï –ù–ò–ß–¢–û!!!


class Mazze():
    def __init__(self, maze: list):
        self.maze = maze
        self.__counts__ = 0

    def get_possible_moves(self, a: tuple, cross=False, b=None) -> list:
        """
        –§—É–Ω—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–æ–∑–º–æ–∂–Ω—ã–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏ –∏–∑ –∑–∞–¥–∞–Ω–æ–π —Ç–æ—á–∫–∏ "–∞" –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞.
        :type a: tuple
        :param a: –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ —Ç–æ—á–∫–∏ –≤ –∫–æ—Ç–æ—Ä—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏. (—Ä—è–¥,–∫–æ–ª–æ–Ω–∫–∞)
        :type b: tuple
        :param b: –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ —ç—Ç–∞ —Ç–æ—á–∫–∞, —Ç–æ –∫–æ–Ω–µ—á–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –Ω–µ—ë.
        :type cross: bool
        :param cross: –ï—Å–ª–∏ —ç—Ç–æ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä True, —Ç–æ —Å–ø–∏—Å–æ–∫ —Ö–æ–¥–æ–≤ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç—Å—è "–∫—Ä–µ—Å—Ç–æ–º", —Ç.–µ. –≤–ª–µ–≤–æ, –≤–ø—Ä–∞–≤–æ, –≤–≤–µ—Ä—Ö, –≤–Ω–∏–∑.
        :rtype: list
        :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —à–∞–≥–æ–≤ –∏–∑ —Ç–æ—á–∫–∏ "–∞".
        """
        moves = []  # –°–æ–∑–¥–∞–¥–∏–º –±—É–¥—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
        if cross:  # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–æ—Ä–æ–≤–∞–Ω –º–µ—Ç–æ–¥ "–∫—Ä–µ—Å—Ç–∞"
            for shift in [-1, 1]:  # —Ç–æ –ø–µ—Ä–µ–±–∏—Ä—ë–º —Å–¥–≤–∏–≥ –æ—Ç —à–∞–≥–∞ –Ω–∞–∑–∞–¥, –¥–æ —à–∞–≥–∞ –≤–ø–µ—Ä—ë–¥
                moves.append((a[0] + shift, a[1]))  # –í—ã—á–∏—Å–ª–∏–º —à–∞–≥–∏ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ (–≤ —Ä—è–¥–∞—Ö)
                moves.append((a[0], a[1] + shift))  # –í—ã—á–∏—Å–ª–∏–º —à–∞–≥–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ (–≤ –∫–æ–ª–æ–Ω–∫–∞—Ö)
            # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —á—Ç–æ –±—ã –æ–Ω–∏ –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
            moves = list(
                filter(lambda point: 0 <= point[0] < len(self.maze) and 0 <= point[1] < len(self.maze[point[0]]),
                       moves))
            moves = list(
                filter(lambda point: self.maze[point[0]][point[1]], moves))  # –í—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–Ω—è—Ç—ã–µ —è—á–µ–π–∫–∏
        else:  # –ê –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ "–∫—Ä–µ—Å—Ç" (–∞ –∫–∞–∫ —Ö–æ–¥–∏—Ç —Ñ–µ—Ä–∑—å –ø–æ –¥–æ—Å–∫–µ), —Ç–æ
            for vshift in [-1, 0, 1]:  # —Ç–æ –ø–µ—Ä–µ–±–∏—Ä—ë–º —Å–¥–≤–∏–≥ –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                for hshift in [-1, 0, 1]:  # –ø–µ—Ä–µ–±–∏—Ä—ë–º —Å–¥–≤–∏–≥ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                    # –ü—Ä–æ–≤–µ—Ä–∏–º –ø–æ–ª—É—á–∏–≤—à–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–æ –ª–∏—à—å –¥–ª—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ–ª–∏—á–∏–Ω,
                    # —Ç–∞–∫ –∫–∞–∫ Python –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É
                    if a[0] + vshift > -1 and a[
                        1] + hshift > -1:  # –í—ã—Ö–æ–¥ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –≤ –±–æ–ª—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–≤–µ—Ä–∏–º –ø–æ –¥—Ä—É–≥–æ–º—É
                        try:  # –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —Å –ª–∞–±–∏—Ä–∏–Ω—Ç–æ–º
                            if self.maze[a[0] + vshift][a[1] + hshift]:  # –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ (1),
                                moves.append((a[0] + vshift, a[1] + hshift))  # —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ—á–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫
                        except:  # –ï—Å–ª–∏ –∂–µ –º—ã –≤—Å—ë —Ç–∞–∫–∏ –≤—ã—à–ª–∏ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞,
                            continue  # —Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Ü–∏–∫–ª –ø–µ—Ä–µ–±–æ—Ä–∞ —Ç–æ—á–µ–∫ (–∏–ª–∏ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –µ–≥–æ :-) )
            moves.remove(a)  # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–ª—É—á–∏–≤—à–µ–≥–æ—Å—è —Å–ø–∏—Å–∫–∞ —Ç–æ—á–∫—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º—ã —Å–æ–±–∏—Ä–∞–µ–º—Å—è –¥–≤–∏–≥–∞—Ç—å—Å—è
        if b is not None:  # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ —Ç–æ—á–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è (b),
            moves = sort_point_list(moves, b, cross)  # —Ç–æ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —É–¥–∞–ª—ë–Ω–Ω–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–π —Ç–æ—á–∫–∏.
        return moves  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫!

    def FindRoute(self, a: tuple, b: tuple, route: list = [], n: int = 1, cross: bool = False, minimum_steps: int = None) -> list:
        """
        –°–∞–º–∞—è –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è! –û—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ (a –∏ b). –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö
        —Å–∞–º—ã—Ö –∫–æ—Ä–æ—Ç–∫–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
        :param a: –¢–æ—á–∫–∞ –Ω–∞—á–∞–ª–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        :type a: tuple
        :param b: –ö–æ–Ω–µ—á–Ω–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞.
        :type b: tuple
        :param route: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–∏. –°–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–∏—Å–æ–∫ —Å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º.
        :type route: list
        :param n: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –ø—Ä–∏ —Ä–µ–∫—É—Ä—Å–∏–∏. –°–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤.
        :type n: int
        :param cross: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –£–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ª–∏—à—å –Ω–∞ 4-–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ 8.
        :type cross: bool
        :param minimum_steps: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–∏. –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—É –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞.
        :type minimum_steps: int
        :return: –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫—Ä–∞—Ç—á–∞–π—à–∏—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∏–ª–∏ None –µ—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.
        """
        self.__counts__ += 1
        # –°—Ä–∞–∑—É –∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º —Å–ª–µ–¥—É—é—â–µ–µ —É—Å–ª–æ–≤–∏–µ, —á—Ç–æ –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –º–∞—Ä—à—Ä—É—Ç —É–∂–µ –Ω–∞–π–¥–µ–Ω –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –ø–µ—Ä–µ–¥–∞–Ω –≤
        # –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π minimum_steps –∏ —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (n) + –∫—Ä–∞—Ç—á–∞–π—à–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–æ —Ñ–∏–Ω–∏—à–∞ –±–æ–ª—å—à–µ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ
        # –º–∏–Ω–∏–º—É–º–∞ —à–∞–≥–æ–≤,
        if minimum_steps and n - 0 + distance(a, b, cross) > minimum_steps:
            return None  # —Ç–æ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None. –î–∞–ª—å—à–µ –ø—É—Ç—å –∏—Å–∫–∞—Ç—å –±–µ–∑—Å–º—ã—Å–ª–µ–Ω–Ω–æ.
        full_path = route + [a]  # –î–æ–±–∞–≤–∏–º –∫ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ–º—É –ø—É—Ç–∏ —Ç–µ–∫—É—â—É—é —Ç–æ—á–∫—É –∏–∑ –∫–æ—Ç–æ—Ä–æ–π –º—ã –∏—â–µ–º –º–∞—Ä—à—Ä—É—Ç.
        next_steps = self.get_possible_moves(a, cross, b)  # –ü–æ–ª—É—á–∏–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤.
        if next_steps == []:  # –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π, –∑–Ω–∞—á–∏—Ç —Ö–æ–¥–æ–≤ –Ω–µ—Ç. –ü—Ä–æ–≤–∞–ª!
            return None  # –¢–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –∏ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–π –ø–æ–∏—Å–∫.
        try:  # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ —Ç–æ—á–∫—É –æ—Ç–∫—É–¥–∞ –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø—Ä–∏—à–ª–∏
            next_steps.remove(route[-1])
        except:  # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –∑–Ω–∞—á–∏—Ç –º—ã —Å—Ç–æ–∏–º –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ —É–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ,
            pass  # —Ç–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –∏ –Ω–µ –¥–µ–ª–∞–µ–º.
        # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ö–æ–¥–æ–≤ –µ—Å—Ç—å —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–µ —à–∞–≥–∏,
        if not set(route).isdisjoint(set(next_steps)):  # –∑–Ω–∞—á–∏—Ç –º—ã —Ö–æ–¥–∏–º –∫—Ä—É–≥–∞–º–∏ –∏ –º–∞—Ä—à—Ä—É—Ç —Ç–æ—á–Ω–æ –Ω–µ –±—É–¥–µ—Ç –∫—Ä–∞—Ç—á–∞–π—à–∏–º,
            return None  # –±—Ä–æ—Å–∞–µ–º –µ–≥–æ.
        # –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞!
        if b in next_steps:  # and n <= minimum_steps:  # –ï—Å–ª–∏ –∏—Å–∫–æ–º–∞—è —Ç–æ—á–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ —Å–æ—Å–µ–¥–Ω–∏—Ö
            return [full_path + [b]]  # —Ç–æ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—É—á–∏–≤—à–∏–π—Å—è –º–∞—Ä—à—Ä—É—Ç –º–µ–∂–¥—É —Ç–æ—á–∫–∞–º–∏. –£–†–ê!!!
        pathes = []  # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–æ–Ω–Ω—É—é —á–∞—Å—Ç—å —Å —Å–æ–∑–¥–∞–Ω–∏—è –±—É–¥—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤.
        for step in next_steps:  # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏.
            # –†–µ–∫—É—Ä—Å–∏—è! –í—ã–∑—ã–≤–∞–µ–º —ç—Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞ –∏–∑ —Å–æ—Å–µ–¥–Ω–∏—Ö —Ç–æ—á–µ–∫ —Å —É—á—ë—Ç–æ–º —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
            path = self.FindRoute(step, b, full_path, n + 1, cross, minimum_steps)  # –∏ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–Ω—ã —É–∂–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π.
            if path is not None:  # –ï—Å–ª–∏ –º–∞—Ä—à—Ä—É—Ç –Ω–∞–π–¥–µ–Ω,
                pathes = pathes + path  # —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
                if minimum_steps is not None:  # –ï—Å–ª–∏ –º–∏–Ω–∏–º—É–º —É–∂–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω,
                    minimum_steps = min(minimum_steps, len(path[0]))  # —Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–ª–∏.
                else:  # –ê –µ—Å–ª–∏ –º–∏–Ω–∏–º—É–º –µ—â—ë –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω,
                    minimum_steps = len(path[0])  # —Ç–æ –ø—Ä–∏—Å–≤–æ–∏–º –µ–≥–æ –ø–µ—Ä–≤—ã–π —Ä–∞–∑
        if pathes != []:  # –ï—Å–ª–∏ –≤ –∏—Ç–æ–≥–µ –Ω–∞–º —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤
            min_length = min(map(len,pathes))  # –æ–ø—Ä–µ–¥–µ–ª–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –º–∞—Ä—Ä—É—Ç–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö
            pathes = [path for path in pathes if len(path) == min_length]  # –ß–∏—Å—Ç–∏–º —Å–ø–∏—Å–æ–∫ –æ—Ç –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã—Ö
            self.__pathes__ = pathes
            return pathes  # –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫!!! –£—Ä–∞ —Ä–∞–±–æ—Ç–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞!!!
        else:  # –ê –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—É—Å—Ç,
            return None  # —Ç–æ –±—Ä–æ—Å–∞–µ–º –≤—Å—ë –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –í–ï–õ–ò–ö–û–ï –ù–ò–ß–¢–û!!!

    def ShowPath(self,a,b, cross=False):
        self.__counts__ = 0
        pathes = self.FindRoute(a,b,cross=cross)
        for path in pathes:
            print('Path ‚Ññ {} of {}, length {} steps'.format(pathes.index(path),len(pathes),len(path)))
            ShowMaze(path,a,b,maze=self.maze)


def EmptyMazeTest(n=10):
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–ª–≥–æ—Ä–∏—Ç–º –Ω–∞ –ø–æ–∏—Å–∫ –º–∞—Ä—à—Ä—É—Ç–∞ –≤ –ø—É—Å—Ç–æ–º –ª–∞–±–∏—Ä–∏–Ω—Ç–µ –Ω–∞ [2 —Ö 2] –¥–æ [n x n]
    :param n: –ö–æ–Ω–µ—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    """
    global COUNTS
    timer = StopWatch()
    maze = [[1]]
    for i in range(n - 1):
        maze[i].append(1)
        maze.append(maze[0])
        COUNTS = 0
        timer.reset()
        roads = FindRoute((len(maze) - 1, 0), (0, len(maze) - 1), cross=False, maze=maze)
        print('{:} X {:}| {:,.0f} –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {:,.6f} —Å–µ–∫—É–Ω–¥. '
              '–ü–µ—Ä–µ–±—Ä–∞–Ω–æ {:,.0f} –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {:,.0f} –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.'.format(i + 2, i + 2,
                                                                                      len(roads), timer.check(),
                                                                                      COUNTS - 1,
                                                                                      (COUNTS - 1) / timer.check()))
        # ShowMaze(roads[0], maze=maze)


if __name__ == '__main__':

    EmptyMazeTest(11)
    '''
2      –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0002 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ         3 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 17,027 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
6      –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0005 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ        15 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 30,690 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
20     –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0024 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ        95 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 39,585 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
70     –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0091 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ       557 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 60,981 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
252    –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0466 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ     3,041 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 65,237 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
924    –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.2461 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ    15,789 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 64,166 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
3,432  –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  1.1850 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ    79,593 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 67,168 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
12,870 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  5.9858 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ   391,855 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 65,464 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
48,620 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ 28.8065 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ 1,892,287 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 65,690 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.

2 X 2          2 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0002 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ         3 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 14,631 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
3 X 3          6 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0003 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ        15 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 43,600 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
4 X 4         20 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0012 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ        71 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 57,082 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
5 X 5         70 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0078 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ       299 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 38,307 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
6 X 6        252 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0584 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ     1,203 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 20,585 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
7 X 7        924 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.0895 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ     4,793 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 53,548 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
8 X 8      3,432 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  0.3542 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ    19,149 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 54,069 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
9 X 9     12,870 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  1.3656 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ    76,949 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 56,349 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
10 X 10   48,620 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞  4.8981 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ   310,791 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 63,452 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.
11 X 11  184,756 –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ 19.9216 —Å–µ–∫—É–Ω–¥. –ü–µ—Ä–µ–±—Ä–∞–Ω–æ 1,260,909 –º–∞—Ä—à—Ä—É—Ç–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é 63,293 –º–∞—Ä—à—Ä–∞—Ç–∞/—Å–µ–∫.'''

    A = (-1, -1)
    B = (-1, -1)

    random.seed()
    for row in range(10):
        for col in range(10):
            rand = random.randint(0, 5)
            if rand == 3 or rand == 5:
                MAZE[row][col] = 0
            else:
                MAZE[row][col] = 1

    ShowMaze()

    A = (int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç–æ—á–∫–∏ –ê. –†—è–¥? ')), int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç–æ—á–∫–∏ –ê. –ö–æ–ª–æ–Ω–∫–∞? ')))
    B = (int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç–æ—á–∫–∏ B. –†—è–¥? ')), int(input('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É —Ç–æ—á–∫–∏ B. –ö–æ–ª–æ–Ω–∫–∞? ')))
    cross = bool(int(input('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤. "–ö—Ä–µ—Å—Ç–æ–º" - 1, –≤–æ –≤—Å–µ —Å—Ç–æ—Ä–æ–Ω—ã - 0? ')))

    COUNTS = 0
    timer = StopWatch()
    route = FindRoute(A, B, cross=cross, maze=MAZE)
    chk_time = timer.check()

    if route is not None:
        for road in route:
            print('Path #', route.index(road) + 1, 'Length = ', len(road))
            ShowMaze(road, A, B, digit=False)
    else:
        print('Path not found in {:,.4f} seconds and {:,.0f} cjmbinations!'.format(chk_time, COUNTS))

    if route is not None:
        print('{:,.0f} - –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞–π–¥–µ–Ω–æ –∑–∞ {:,.4f} —Å–µ–∫—É–Ω–¥, –¥–ª–∏–Ω–Ω–∞ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ - {:,.2f}'.format(len(route),
                                                                                                       chk_time,
                                                                                                       len(route[0])))
    print('–°–æ–≤–µ—Ä—à–µ–Ω–æ {:,.0f} –ø–µ—Ä–µ–±–æ—Ä–æ–≤ —Å–æ —Å–∫–æ—Ä–æ—Å—Ç—å—é {:,.2f} –ø–µ—Ä–µ–±–æ—Ä–æ–≤ —Å–µ–∫—É–Ω–¥—É'.format(COUNTS, COUNTS / chk_time))
